// node_widget_registry_initializer.dart

import 'package:flow_editor/ui/node/node_widget_registry.dart';
import 'package:flow_editor/core/models/ui/node_model.dart';

// å·²å­˜åœ¨çš„Widget
import 'package:flow_editor/ui/node/workflow/start_node_widget.dart';
import 'package:flow_editor/ui/node/workflow/end_node_widget.dart';
import 'package:flow_editor/ui/node/workflow/placeholder_node_widget.dart';
import 'package:flow_editor/ui/node/workflow/middle_node_widget.dart';

// ðŸš© æ‰€æœ‰ Workflow State èŠ‚ç‚¹å¯¹åº”çš„Widget (ä½ éœ€è‡ªè¡Œå®žçŽ°)
// import 'package:flow_editor/ui/node/workflow/task_node_widget.dart';
// import 'package:flow_editor/ui/node/workflow/pass_node_widget.dart';
// import 'package:flow_editor/ui/node/workflow/choice_node_widget.dart';
// import 'package:flow_editor/ui/node/workflow/succeed_node_widget.dart';
// import 'package:flow_editor/ui/node/workflow/fail_node_widget.dart';
// import 'package:flow_editor/ui/node/workflow/wait_node_widget.dart';
// import 'package:flow_editor/ui/node/workflow/parallel_node_widget.dart';
// import 'package:flow_editor/ui/node/workflow/map_node_widget.dart';
// import 'package:flow_editor/ui/node/workflow/custom_node_widget.dart';

NodeWidgetRegistry initNodeWidgetRegistry() {
  final registry = NodeWidgetRegistry();

  // å·²æœ‰çš„èŠ‚ç‚¹
  registry.register<NodeModel>(
    type: 'start',
    builder: (node) => StartNodeWidget(node: node),
    useDefaultContainer: false,
  );

  registry.register<NodeModel>(
    type: 'end',
    builder: (node) => EndNodeWidget(node: node),
    useDefaultContainer: false,
  );

  registry.register<NodeModel>(
    type: 'placeholder',
    builder: (node) => PlaceholderNodeWidget(node: node),
    useDefaultContainer: false,
  );

  registry.register<NodeModel>(
    type: 'middle',
    builder: (node) => MiddleNodeWidget(node: node),
    useDefaultContainer: false,
  );

  registry.register<NodeModel>(
    type: 'group',
    builder: (node) => MiddleNodeWidget(node: node),
    useDefaultContainer: false,
  );

  // ðŸš© ä»¥ä¸‹ä¸ºå®Œæ•´çš„ Workflow State èŠ‚ç‚¹æ³¨å†Œ

  // Task èŠ‚ç‚¹
  registry.register<NodeModel>(
    type: 'Task',
    builder: (node) => MiddleNodeWidget(node: node),
    useDefaultContainer: false,
  );

  // Pass èŠ‚ç‚¹
  registry.register<NodeModel>(
    type: 'Pass',
    builder: (node) => MiddleNodeWidget(node: node),
    useDefaultContainer: false,
  );

  // Choice èŠ‚ç‚¹
  registry.register<NodeModel>(
    type: 'Choice',
    builder: (node) => MiddleNodeWidget(node: node),
    useDefaultContainer: false,
  );

  // Succeed èŠ‚ç‚¹
  registry.register<NodeModel>(
    type: 'Succeed',
    builder: (node) => MiddleNodeWidget(node: node),
    useDefaultContainer: false,
  );

  // Fail èŠ‚ç‚¹
  registry.register<NodeModel>(
    type: 'Fail',
    builder: (node) => MiddleNodeWidget(node: node),
    useDefaultContainer: false,
  );

  // Wait èŠ‚ç‚¹
  registry.register<NodeModel>(
    type: 'Wait',
    builder: (node) => MiddleNodeWidget(node: node),
    useDefaultContainer: false,
  );

  // Parallel èŠ‚ç‚¹
  registry.register<NodeModel>(
    type: 'Parallel',
    builder: (node) => MiddleNodeWidget(node: node),
    useDefaultContainer: false,
  );

  // Map èŠ‚ç‚¹
  registry.register<NodeModel>(
    type: 'Map',
    builder: (node) => MiddleNodeWidget(node: node),
    useDefaultContainer: false,
  );

  // Custom èŠ‚ç‚¹
  registry.register<NodeModel>(
    type: 'Custom',
    builder: (node) => MiddleNodeWidget(node: node),
    useDefaultContainer: false,
  );

  return registry;
}
